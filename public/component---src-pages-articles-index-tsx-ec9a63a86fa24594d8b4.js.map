{"version":3,"file":"component---src-pages-articles-index-tsx-ec9a63a86fa24594d8b4.js","mappings":"6IA4CA,IAjCoBA,IAOK,IAPJ,MACnBC,EAAK,KACLC,EAAI,YACJC,EAAW,SACXC,EAAQ,UACRC,EAAS,GACTC,GACiBN,EACjB,OACEO,EAAAA,cAAA,KAAGC,KAAI,uBAAyBF,GAC9BC,EAAAA,cAAA,OACEE,UAAU,uFACVC,MAAO,CAAEC,MAAON,EAAY,YAASO,IAErCL,EAAAA,cAAA,OAAKM,IAAKT,EAAUU,IAAKb,EAAOQ,UAAU,8BAC1CF,EAAAA,cAAA,OAAKE,UAAU,OACbF,EAAAA,cAAA,MAAIE,UAAU,yBAAyBR,GACvCM,EAAAA,cAAA,KAAGE,UAAU,yBACV,IAAIM,KAAKb,GAAMc,mBAAmB,QAAS,CAC1CC,KAAM,UACNC,MAAO,OACPC,IAAK,aAGTZ,EAAAA,cAAA,KAAGE,UAAU,yCACVW,EAAAA,EAAAA,IAAcjB,MAInB,C,8HCxBR,MAgCMkB,EAA4CrB,IAI5C,IAJ6C,MACjDsB,EAAK,QACLC,EAAO,SACPC,GACDxB,EACC,OACEO,EAAAA,cAAA,SAAOE,UAAU,+BACfF,EAAAA,cAAA,SACEkB,KAAK,WACLF,QAASA,EACTC,SAAUA,EACVf,UAAU,WAEZF,EAAAA,cAAA,QACEE,UAAS,yDACPc,EAAU,wBAA0B,yBAGrCD,GAEG,EAyDZ,WAAeI,EAAAA,EAAAA,IArDKC,KAClB,MAAM,KAAEC,IAxDDC,EAAAA,EAAAA,UAAS,kBAAkBC,UAChC,MAAM,WAAEC,SAAqBC,EAAAA,EAAcC,SAIxCC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mQAgBN,OAAOL,CAAU,KAoCb,EAACM,EAAgB,EAAEC,IAAuBC,EAAAA,EAAAA,UAC9C,OAEMX,KAAMY,IAAiBC,EAAAA,EAAAA,IAAgB,CAC7CC,aAAcL,aAAgB,EAAhBA,EAAkBM,KAChCC,OAAQ,IAEV,OACErC,EAAAA,cAAA,OAAKE,UAAU,iCACbF,EAAAA,cAACsC,EAAAA,EAAM,MACPtC,EAAAA,cAAA,OAAKE,UAAU,wBACbF,EAAAA,cAAA,MAAIE,UAAU,gCAA+B,YAC7CF,EAAAA,cAAA,OAAKE,UAAU,iCACZmB,aAAI,EAAJA,EAAMkB,MAAMC,KAAKC,GAChBzC,EAAAA,cAACc,EAAY,CACXC,MAAO0B,EAAKL,KACZnB,SAAWyB,IACLA,EAAEC,OAAO3B,SAASe,EAAoBU,EAAK,EAEjDzB,QAASyB,EAAK1C,MAAO+B,aAAgB,EAAhBA,EAAkB/B,UAc/CC,EAAAA,cAAA,OAAKE,UAAU,QACZ+B,aAAY,EAAZA,EAAcM,MAAMC,KAAI,CAACI,EAASC,IACjC7C,EAAAA,cAAA,OAAK8C,IAAKD,EAAO3C,UAAU,QACzBF,EAAAA,cAAC+C,EAAAA,EAAW,CACVhD,GAAI6C,EAAQ7C,GACZJ,KAAMiD,EAAQjD,KACdD,MAAOkD,EAAQlD,MACfI,WAAS,EACTD,SAAU+C,EAAQI,cAAcP,KAAKQ,KACrCrD,YAAagD,EAAQM,cAKzB,G","sources":["webpack://premiere-pluie/./src/components/ArticleCard.tsx","webpack://premiere-pluie/./src/pages/articles/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { formatExcerpt } from \"../data/article\";\ninterface ArticleCardProps {\n  id: string;\n  title: string;\n  date: string;\n  description: string;\n  imageUrl: string;\n  fullWidth?: boolean;\n}\n\nconst ArticleCard = ({\n  title,\n  date,\n  description,\n  imageUrl,\n  fullWidth,\n  id,\n}: ArticleCardProps) => {\n  return (\n    <a href={`/article?article_id=${id}`}>\n      <div\n        className=\"flex-none mx-2 bg-white rounded-lg overflow-hidden shadow-lg my-1 w-72 lg:w-1/4 h-96\"\n        style={{ width: fullWidth ? \"100%\" : undefined }}\n      >\n        <img src={imageUrl} alt={title} className=\"w-full h-1/2 object-cover\" />\n        <div className=\"p-4\">\n          <h2 className=\"text-lg font-semibold\">{title}</h2>\n          <p className=\"text-sm text-gray-600\">\n            {new Date(date).toLocaleDateString(\"fr-FR\", {\n              year: \"numeric\",\n              month: \"long\",\n              day: \"numeric\",\n            })}\n          </p>\n          <p className=\"mt-2 font-light text-sm line-clamp-3\">\n            {formatExcerpt(description)}\n          </p>\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport default ArticleCard;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { useArticle, useLastArticles } from \"../../data/article\";\nimport Header from \"../../components/Header\";\nimport { useQuery } from \"react-query\";\nimport { graphQLClient } from \"../../data/dataFetching\";\nimport { gql } from \"graphql-request\";\nimport ArticleList from \"../../components/ArticleList\";\nimport ArticleCard from \"../../components/ArticleCard\";\nimport { withQueryClient } from \"../../components/QueryClientHOC\";\n\ninterface Category {\n  id: string;\n  name: string;\n  children: { nodes: { id: string; name: string }[] };\n}\n\nconst useGetCategories = () => {\n  return useQuery(\"get-categories\", async () => {\n    const { categories } = await graphQLClient.request<{\n      categories: {\n        nodes: Category[];\n      };\n    }>(gql`\n      query {\n        categories {\n          nodes {\n            id\n            name\n            children {\n              nodes {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    `);\n    return categories;\n  });\n};\n\ninterface PillCheckboxProps {\n  label: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst PillCheckbox: React.FC<PillCheckboxProps> = ({\n  label,\n  checked,\n  onChange,\n}) => {\n  return (\n    <label className=\"flex items-center space-x-2\">\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={onChange}\n        className=\"hidden\"\n      />\n      <span\n        className={`rounded-full  border-2 py-2 px-4 m-1 hover:font-bold ${\n          checked ? \"bg-primary text-white\" : \"bg-white  text-black\"\n        }`}\n      >\n        {label}\n      </span>\n    </label>\n  );\n};\n\nconst ArticlePage = () => {\n  const { data } = useGetCategories();\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(\n    null\n  );\n  const { data: articlesData } = useLastArticles({\n    categoryName: selectedCategory?.name,\n    number: 5,\n  });\n  return (\n    <div className=\"font-unbounded transition-all\">\n      <Header />\n      <div className=\"px-5 bg-primary py-3\">\n        <h1 className=\"font-extrabold text-3xl py-6\">ARTICLES</h1>\n        <div className=\"flex flex-wrap justify-center\">\n          {data?.nodes.map((node) => (\n            <PillCheckbox\n              label={node.name}\n              onChange={(e) => {\n                if (e.target.checked) setSelectedCategory(node);\n              }}\n              checked={node.id === selectedCategory?.id}\n            />\n\n            // <input\n            //   type=\"checkbox\"\n            //   onClick={() => setSelectedCategory(node)}\n            //   className=\"rounded-full bg-white border-2 py-2 px-4 m-1 hover:font-bold\"\n            //   key={node.id}\n            // >\n            //   {node.name}\n            // </input>\n          ))}\n        </div>\n      </div>\n      <div className=\"px-5\">\n        {articlesData?.nodes.map((article, index) => (\n          <div key={index} className=\"my-4\">\n            <ArticleCard\n              id={article.id}\n              date={article.date}\n              title={article.title}\n              fullWidth\n              imageUrl={article.featuredImage.node.link}\n              description={article.excerpt}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default withQueryClient(ArticlePage);\n"],"names":["_ref","title","date","description","imageUrl","fullWidth","id","React","href","className","style","width","undefined","src","alt","Date","toLocaleDateString","year","month","day","formatExcerpt","PillCheckbox","label","checked","onChange","type","withQueryClient","ArticlePage","data","useQuery","async","categories","graphQLClient","request","gql","_templateObject","_taggedTemplateLiteralLoose","selectedCategory","setSelectedCategory","useState","articlesData","useLastArticles","categoryName","name","number","Header","nodes","map","node","e","target","article","index","key","ArticleCard","featuredImage","link","excerpt"],"sourceRoot":""}